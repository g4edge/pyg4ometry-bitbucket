# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Vector', [dirname(__file__)])
        except ImportError:
            import _Vector
            return _Vector
        if fp is not None:
            try:
                _mod = imp.load_module('_Vector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Vector = swig_import_helper()
    del swig_import_helper
else:
    import _Vector
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)

    def __init__(self, *args):
        this = _Vector.new_Vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Vector.delete_Vector
    __del__ = lambda self: None

    def x(self):
        return _Vector.Vector_x(self)

    def y(self):
        return _Vector.Vector_y(self)

    def z(self):
        return _Vector.Vector_z(self)

    def clone(self):
        return _Vector.Vector_clone(self)

    def negated(self):
        return _Vector.Vector_negated(self)

    def plus(self, rhs):
        return _Vector.Vector_plus(self, rhs)

    def __add__(self, rhs):
        return _Vector.Vector___add__(self, rhs)

    def minus(self, rhs):
        return _Vector.Vector_minus(self, rhs)

    def __sub__(self, rhs):
        return _Vector.Vector___sub__(self, rhs)

    def times(self, a):
        return _Vector.Vector_times(self, a)

    def __mul__(self, a):
        return _Vector.Vector___mul__(self, a)

    def divideBy(self, a):
        return _Vector.Vector_divideBy(self, a)

    def __div__(self, a):
        return _Vector.Vector___div__(self, a)

    def dot(self, rhs):
        return _Vector.Vector_dot(self, rhs)

    def scale(self, rhs):
        return _Vector.Vector_scale(self, rhs)

    def lerp(self, rhs, t):
        return _Vector.Vector_lerp(self, rhs, t)

    def length(self):
        return _Vector.Vector_length(self)

    def unit(self):
        return _Vector.Vector_unit(self)

    def cross(self, rhs):
        return _Vector.Vector_cross(self, rhs)

    def __str__(self):
        return _Vector.Vector___str__(self)

    def __repr__(self):
        return _Vector.Vector___repr__(self)

    def __rmul__(self, a):
        return _Vector.Vector___rmul__(self, a)

    def __getitem__(self, i):
        return _Vector.Vector___getitem__(self, i)

    def __setitem__(self, i, d):
        return _Vector.Vector___setitem__(self, i, d)

    def __neg__(self):
        return _Vector.Vector___neg__(self)
Vector_swigregister = _Vector.Vector_swigregister
Vector_swigregister(Vector)

# This file is compatible with both classic and new-style classes.


