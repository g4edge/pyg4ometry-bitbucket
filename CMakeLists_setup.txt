cmake_minimum_required(VERSION 3.1)

project(pyg4ometry-cmake)

# boost
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.71.0 QUIET COMPONENTS system) # header only libraries must not be added here

if(${Boost_FOUND})
  message(STATUS "HAVFOUND Boost ${Boost_INCLUDE_DIRS}")
  include_directories(SYSTEM ${Boost_INCLUDE_DIRS})
else()
  message(STATUS "NOTFOUND boost")
endif()

# pybind11
# /opt/local/share/cmake/pybind11/pybind11Config.cmake
#``pybind11_INCLUDE_DIRS``
#  Directories where pybind11 and python headers are located.
#``pybind11_INCLUDE_DIR``
#  Directory where pybind11 headers are located.
#``pybind11_DEFINITIONS``
#  Definitions necessary to use pybind11, namely USING_pybind11.
#``pybind11_LIBRARIES``
#  Compile flags and python libraries (as needed) to link against.
find_package(pybind11 QUIET)
if (pybind11_FOUND)
  message(STATUS "HAVFOUND pybind11 ${pybind11_INCLUDE_DIRS} ${pybind11_LIBRARIES}")
else()
  message(STATUS "NOTFOUND pybind11")
endif()

# opencascade
# /opt/local/lib/cmake/opencascade/OpenCASCADEConfig.cmake
find_package(OpenCASCADE QUIET)
if (OpenCASCADE_FOUND)
  message(STATUS "HAVFOUND OpenCASCADE ${OpenCASCADE_INCLUDE_DIR} ${OpenCASCADE_LIBRARY_DIR}")
else()
  message(STATUS "NOTFOUND OpenCASCADE")
endif()

# cgal
# there are lots of possible components you can search for...
find_package(CGAL QUIET)
if (CGAL_FOUND)
# CGAL_ROOT is the root directory of it
  message(STATUS "HAVFOUND CGAL ${CGAL_INCLUDE_DIRS} ${CGAL_ROOT} ${CGAL_LIBRARIES}")
else()
  message(STATUS "NOTFOUND CGAL")
endif()

# mfpr
find_package(MFPR QUIET)
if (MPFR_FOUND)
  message(STATUS "HAVFOUND MPFR ${MPFR_INCLUDE_DIR} ${MPFR_LIBRARIES_DIR} ${MPFR_LIBRARIES}")
else()
  message(STATUS "NOTFOUND MPFR")
endif()

# gmp
find_package(gmp QUIET)
if (GMP_FOUND)
  message(STATUS "HAVFOUND GMP ${GMP_INCLUDE_DIR} ${GMP_LIBRARIES_DIR} ${GMP_LIBRARIES}")
else()
  message(STATUS "NOTFOUND GMP")
endif()
