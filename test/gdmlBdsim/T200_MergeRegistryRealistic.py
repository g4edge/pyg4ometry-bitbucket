import os as _os
import unittest as _unittest

import pyg4ometry.gdml as _gd
import pyg4ometry.geant4 as _g4
import pyg4ometry.visualisation as _vi

def Load(filename):
    reader = _gd.Reader(filename)
    reg = reader.getRegistry()
    return reg

class MergeRegistryRealistic(_unittest.TestCase):
    def test_MergeRegistryRealisticMaterialClash(self):
        vis=False
        interactive=False
        
        reg0 = _g4.Registry()
        # these files were generated by BDSM, so they have the expanded full definition
        # of NIST materials and they both have similar ones - for example 'G4_AIR'
        reg1 = Load("001_001_layout.gdml")
        reg2 = Load("001_002_one_of_each.gdml")
        
        l1 = reg1.getWorldVolume()
        l2 = reg2.getWorldVolume()
        
        wx0 = _gd.Constant("wx0", "20", reg0, True)
        wy0 = _gd.Constant("wy0", "20", reg0, True)
        wz0 = _gd.Constant("wz0", "20", reg0, True)
        
        wm = _g4.MaterialPredefined("G4_AIR", reg0)
        ws = _g4.solid.Box("ws", wx0, wy0, wz0, reg0, "m")
        wl = _g4.LogicalVolume(ws, wm, "wl", reg0)
        
        p1 = _g4.PhysicalVolume([0,0,0],[-100,0,0], l1, "l1_pv", wl, reg0)
        p2 = _g4.PhysicalVolume([0,0,0],[ 100,0,0], l2, "l2_pv", wl, reg0)

        reg0.addVolumeRecursive(p1)
        reg0.addVolumeRecursive(p2)
        reg0.setWorld(wl)
        
        # gdml output
        w = _gd.Writer()
        w.addDetector(reg0)
        w.write(_os.path.join(_os.path.dirname(__file__), "T200_MergeRegistryRealistic.gdml"))
        
        # test extent of physical volume
        extentBB = wl.extent(includeBoundingSolid=True)
        extent   = wl.extent(includeBoundingSolid=False)
        
        # visualisation
        v = None
        if vis:
            v = _vi.VtkViewer()
            v.addLogicalVolume(reg0.getWorldVolume())
            v.addAxes(_vi.axesFromExtents(extentBB)[0])
            v.view(interactive=interactive)
            
        return {"teststatus": True, "logicalVolume":wl, "vtkViewer":v}


if __name__ == "__main__":
    _unittest.main(verbosity=2)
