@manual{Mcnp_Werner,
author = "{C}. {J}. {W}erner {\it et al.}",
title  = "{MCNP}6.2 {R}elease {N}otes",
booktitle = "{L}os {A}lamos {N}ational {L}aboratory report {LA-UR}-18-20808",
year = "2018"
}

@book{Fluka_Ferrari,
      author        = "Ferrari, A and Sala, Paola R and Fassò, A and Ranft,
                       Johannes",
      title         = "{FLUKA: A multi-particle transport code (program version
                       2005)}",
      publisher     = "CERN",
      address       = "Geneva",
      series        = "CERN Yellow Reports: Monographs",
      year          = "2005",
      doi           = "10.5170/CERN-2005-010",
}

@article{Fluka_Bohlen,
title = "The {FLUKA} Code: {D}evelopments and {C}hallenges for {H}igh {E}nergy and {M}edical {A}pplications",
journal = "{N}uclear {D}ata {S}heets",
volume = "120",
pages = "211 - 214",
year = "2014",
issn = "0090-3752",
doi = "10.1016/j.nds.2014.07.049",
author = "T.T. Böhlen and F. Cerutti and M.P.W. Chin and A. Fassò and A. Ferrari and P.G. Ortega and A. Mairani and P.R. Sala and G. Smirnov and V. Vlachoudis",
abstract = "The FLUKA Monte Carlo code is used extensively at CERN for all beam-machine interactions, radioprotection calculations and facility design of forthcoming projects. Such needs require the code to be consistently reliable over the entire energy range (from MeV to TeV) for all projectiles (full suite of elementary particles and heavy ions). Outside CERN, among various applications worldwide, FLUKA serves as a core tool for the HIT and CNAO hadron-therapy facilities in Europe. Therefore, medical applications further impose stringent requirements in terms of reliability and predictive power, which demands constant refinement of sophisticated nuclear models and continuous code improvement. Some of the latest developments implemented in FLUKA are presented in this paper, with particular emphasis on issues and concerns pertaining to CERN and medical applications."
}

@article{Geant3_Brun,
    author = "Brun, R. and Bruyant, F. and Maire, M. and McPherson, A.C. and Zanarini, P.",
    title = "{GEANT3}",
    reportNumber = "CERN-DD-EE-84-1",
    month = sep,
    year = "1987"
}

@article{Geant4_Agostinelli,
title = "Geant4—a simulation toolkit",
journal = "Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers, Detectors and Associated Equipment",
volume = "506",
number = "3",
pages = "250--303",
year = "2003",
issn = "0168-9002",
doi = "10.1016/S0168-9002(03)01368-8",
author = "{S}. {A}gostinelli {\it et al.}",
keywords = "Simulation, Particle interactions, Geometrical modelling, Software engineering, Object-oriented technology, Distributed software development",
abstract = "Geant4 is a toolkit for simulating the passage of particles through matter. It includes a complete range of functionality including tracking, geometry, physics models and hits. The physics processes offered cover a comprehensive range, including electromagnetic, hadronic and optical processes, a large set of long-lived particles, materials and elements, over a wide energy range starting, in some cases, from 250eV and extending in others to the TeV energy range. It has been designed and constructed to expose the physics models utilised, to handle complex geometries, and to enable its easy adaptation for optimal use in different sets of applications. The toolkit is the result of a worldwide collaboration of physicists and software engineers. It has been created exploiting software engineering and object-oriented technology and implemented in the C++ programming language. It has been used in applications in particle physics, nuclear physics, accelerator design, space engineering and medical physics."
}

@misc{FreeCAD,
title = "Free{CAD} Version 0.19",
author = "{The FreeCAD Team}",
url = "https://www.freecadweb.org",
year = {2020},
lastchecked = {16~September~2020}
}

@misc{OpenCASCADE,
title = "Open{CASCADE}",
author = "{Open Cascade S.A.S}",
url = "https://www.opencascade.com",
year = {2020},
lastchecked = {16~September~2020}
}

@book{VTK4,
  author={Will Schroeder and Ken Martin and Bill Lorensen},
  title={{The Visualization Toolkit--An Object-Oriented Approach To 3D
                  Graphics}},
  publisher={Kitware, Inc.},
  edition={Fourth},
  year={2006}
}

@article{BDSIM_Nevay,
title = "{BDSIM}: An accelerator tracking code with particle–matter interactions",
journal = "Computer Physics Communications",
volume = "252",
pages = "107200",
year = "2020",
issn = "0010-4655",
doi = "10.1016/j.cpc.2020.107200",
author = "Laurence James Nevay and Stewart Takashi Boogert and Jochem Snuverink and Andrey Abramov and Laurence Charles Deacon and Hector Garcia-Morales and Helena Lefebvre and Stephen Michael Gibson and Regina Kwee-Hinzmann and William Shields and Stuart Derek Walker",
keywords = "Monte Carlo simulation, Particle accelerator, Geant4, Particle physics, Particle tracking",
abstract = "Beam Delivery Simulation (BDSIM) is a program that simulates the passage of particles in a particle accelerator. It uses a suite of standard high energy physics codes (Geant4, ROOT and CLHEP) to create a computational model of a particle accelerator that combines accurate accelerator tracking routines with all of the physics processes of particles in Geant4. This unique combination permits radiation and detector background simulations in accelerators where both accurate tracking of all particles is required over long range or over many revolutions of a circular machine, as well as interaction with the material of the accelerator.
Program summary
Program Title: BDSIM Program Files doi: http://dx.doi.org/10.17632/bzg5hc65h6.1 Licensing provisions: GNU General Public License 3 Programming language: C++, flex, bison External routines/libraries: Geant4, CLHEP, ROOT, gzstream, CMake Nature of problem: Simulate energy deposition and charged particle detector background in a particle accelerator originating from beam loss where particles may pass both through the vacuum pipe with magnetic and electromagnetic fields, as well as through the material of the magnets and accelerator itself. Simulate the passage of particles both through an accelerator and the surrounding material such as air. Do so in a sufficiently flexible way that a variety of accelerator configurations can be easily simulated. Solution method: Automatic creation of a 3D Geant4 model from an optical description of an accelerator using a library of generic 3D models that are user extendable. Accelerator tracking routines, the associated fields and coordinates transforms are provided for accurate magnetic field tracking."
}

@article{Brun:1997pa,
    author = "Brun, R. and Rademakers, F.",
    editor = "Werlen, M. and Perret-Gallix, D.",
    title = "{ROOT: An object oriented data analysis framework}",
    doi = "10.1016/S0168-9002(97)00048-X",
    journal = "Nucl. Instrum. Meth. A",
    volume = "389",
    pages = "81--86",
    year = "1997"
}

@article{GUIMesh_Pinto,
title = "{GUIM}esh: A tool to import {STEP} geometries into {Geant4} via {GDML}",
journal = "Computer Physics Communications",
volume = "239",
pages = "150 - 156",
year = "2019",
issn = "0010-4655",
doi = "10.1016/j.cpc.2019.01.024",
author = "M. Pinto and P. Gonçalves",
keywords = "Geant4, STEP, GDML, Radiation, Simulation, Mesh",
abstract = "Detailed radiation analysis of instruments flown in space is critical to ensure mission safety, often requiring the use of state-of-the-art particle transport simulation tools. Geant4 is one of the most powerful toolkits to simulate the interaction and the passage of particles through matter, but it is not prepared to receive Standard for The Exchange of Product data (STEP) files, the most versatile Computer-Aided Design (CAD) format, as input, requiring previous conversion to other CAD formats. This may lead to loss of detail and under or overestimation of the quantities under study, especially when the instruments have complex shapes, and/or a large number of volumes. Though several solutions have been proposed to import complex geometries from STEP files into Geant4, so far, only commercial options are available. In this paper we present a new tool, GUIMesh, that embeds FreeCAD libraries, an open-source CAD editor, to tessellate volumes, and convert them to Geometry Description Markup Language (GDML), a Geant4 readable format, in a straightforward way. Several degrees of freedom are given to the user regarding mesh precision and choice of material. Different geometries were tested for material definition, geometry and navigation errors, and the method used was successfully validated.
Program Summary
Program Title: GUIMesh Program Files doi: http://dx.doi.org/10.17632/c3c9xbspzp.1 Licensing provisions: GNU General Public License 3 (GPLv3) Programming language: Python Nature of problem: No open-source software allows to import STEP geometries intro Geant4, one of the most powerful toolkits to simulate radiation interaction with matter. Since CAD software is extensively used in the design of particle and radiation detection instruments, it is highly desirable for physicists that STEP geometries can be imported to Geant4 with little effort instead of having to code structures made of a very large number of solid volumes which are difficult to accurately reproduce with Geant4 C++ classes. Solution method: STEP geometries are converted to tessellated volumes (with some margin of error) using FreeCAD libraries. A Python script then writes GDML files based on the results allowing users to import these geometries with Geant4. A graphical user interface provides several options to the user, including material assignment and mesh precision setting for each volume."
}

@inproceedings{ESABASE2,
  Title={Recent Extensions Of The {ESABASE2} / Debris Impact Risk Assessment Tool},
  author={A. Miller and M. Zaake and F. Gro{\ss}mann-ruh and K. Bunte and M. Millinger and G. Drolshagen},
  year={2017},
  booktitle={Proceedings of the 7th European Conference on Space Debris}
}


@INPROCEEDINGS{FASTRAD,
  author={P. {Pourrouquet} and J. {Thomas} and P. {Peyrard} and R. {Ecoffet} and G. {Rolland}},
  booktitle={2011 IEEE Radiation Effects Data Workshop},
  title={{FASTRAD} 3.2: Radiation Shielding Tool with a New {Monte Carlo} Module},
  year={2011},
  volume={},
  number={},
  pages={1-5},
  doi = "10.1109/redw.2010.6062530"
  }

@article{DAGMC,
title = "Acceleration techniques for the direct use of {CAD}-based geometry in fusion neutronics analysis",
journal = "Fusion Engineering and Design",
volume = "85",
number = "10",
pages = "1759 - 1765",
year = "2010",
note = "Proceedings of the Ninth International Symposium on Fusion Nuclear Technology",
issn = "0920-3796",
doi = "10.1016/j.fusengdes.2010.05.030",
author = "Paul P.H. Wilson and Timothy J. Tautges and Jason A. Kraftcheck and Brandon M. Smith and Douglass L. Henderson",
keywords = "Fusion neutronics, CAD-based analysis, Software development",
abstract = "The Direct Accelerated Geometry Monte Carlo (DAGMC) software library offers a unique approach to performing neutronics analysis on CAD-based geometries of fusion systems. By employing a number of acceleration techniques, the ray-tracing operations that are fundamental to Monte Carlo radiation transport are implemented efficiently for direct use on the CAD-based solid model, eliminating the need to translate to the native Monte Carlo input language. By forming hierarchical trees of oriented bounding boxes, one for each facet that results from a high-fidelity tessellation of the model, the ray-tracing performance is adequate to permit detailed analysis of large complex systems. In addition to the reduction in human effort and improvement in quality assurance that is found in the translation approaches, the DAGMC approach also permits the analysis of geometries with higher order surfaces that cannot be represented by many native Monte Carlo radiation transport tools. The paper describes the various acceleration techniques and demonstrates the resulting capability in a real fusion neutronics analysis."
}

@article{McCad,
title = "Improved algorithms and advanced features of the {CAD} to {MC} conversion tool {McCad}",
journal = "Fusion Engineering and Design",
volume = "89",
number = "9",
pages = "1885 - 1888",
year = "2014",
month = sep,
note = "Proceedings of the 11th International Symposium on Fusion Nuclear Technology-11 (ISFNT-11) Barcelona, Spain, 15-20 September, 2013",
issn = "0920-3796",
doi = "10.1016/j.fusengdes.2014.05.015",
author = "L. Lu and U. Fischer and P. Pereslavtsev",
keywords = "McCad, Decomposition, Void filling, MCNP",
abstract = "McCad is a geometry conversion tool developed at KIT to enable the automatic bi-directional conversions of CAD models into the Monte Carlo (MC) geometries utilized for neutronics calculations (CAD to MC) and, reversed (MC to CAD), for visualization purposes. The paper presents the latest improvements of the conversion algorithms including improved decomposition, void filling and an advanced interface for the materials editing and assignment. The new implementations and features were tested on fusion neutronics applications to the DEMO and ITER NBI (Neutral Beam Injector) models. The results demonstrate greater stability and enhanced efficiency of McCad conversion process."
}

@misc{InStep,
title = "{I}n{S}tep",
url = "https://www.solveering.com/InStep/instep.aspx",
lastchecked = {16~September~2020}
}

@misc{CADMC,
title = "(CADMC)",
url = "http://polar.psi.ch/cadmc/",
lastchecked = {16~September~2020}
}

@article{poole2012acad,
    author = {Poole, C. M. and Cornelius, I. and Trapp, J. V. and Langton, C. M.},
    title = {{A CAD Interface for GEANT4}},
    journal={Australasian Physical \& Engineering Science in Medicine},
    year = 2012,
    month = sep,
    doi = {10.1007/s13246-012-0159-8},
}

@book{10.5555/2501720,
author = {Parr, Terence},
title = {The Definitive ANTLR 4 Reference},
year = {2013},
isbn = {1934356999},
publisher = {Pragmatic Bookshelf},
edition = {2nd},
abstract = {Programmers run into parsing problems all the time. Whether it's a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language--ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features. Build your own languages with ANTLR v4, using ANTLR's new advanced parsing technology. In this book, you'll learn how ANTLR automatically builds a data structure representing the input (parse tree) and generates code that can walk the tree (visitor). You can use that combination to implement data readers, language interpreters, and translators. You'll start by learning how to identify grammar patterns in language reference manuals and then slowly start building increasingly complex grammars. Next, you'll build applications based upon those grammars by walking the automatically generated parse trees. Then you'll tackle some nasty language problems by parsing files containing more than one language (such as XML, Java, and Javadoc). You'll also see how to take absolute control over parsing by embedding Java actions into the grammar. You'll learn directly from well-known parsing expert Terence Parr, the ANTLR creator and project lead. You'll master ANTLR grammar construction and learn how to build language tools using the built-in parse tree visitor mechanism. The book teaches using real-world examples and shows you how to use ANTLR to build such things as a data file reader, a JSON to XML translator, an R parser, and a Java class-interface extractor. This book is your ticket to becoming a parsing guru!What You Need: ANTLR 4.0 and above. Java development tools. Ant build system optional (needed for building ANTLR from source)}
}

@article{GDML,
  title={{Geometry Description Markup Language} for physics simulation and analysis applications},
  author={Chytracek, Radovan and McCormick, Jeremy and Pokorski, Witold and Santin, Giovanni},
  journal={IEEE Transactions on Nuclear Science},
  volume={53},
  number={5},
  pages={2892--2896},
  year={2006},
  month=oct,
  publisher={IEEE},
  doi = "10.1109/TNS.2006.881062"
}

@misc{fons_rademakers_2019_3895860,
  author       = {Fons Rademakers and
                  Philippe Canal and
                  Axel Naumann and
                  Olivier Couet and
                  Lorenzo Moneta and
                  Vassil Vassilev and
                  Sergey Linev and
                  Danilo Piparo and
                  Gerardo GANIS and
                  Bertrand Bellenot and
                  Enrico Guiraud and
                  Guilherme Amadio and
                  wverkerke and
                  Pere Mato and
                  TimurP and
                  Matevž Tadel and
                  wlav and
                  Enric Tejedor and
                  Jakob Blomer and
                  Andrei Gheata and
                  Stephan Hageboeck and
                  Stefan Roiser and
                  marsupial and
                  Stefan Wunsch and
                  Oksana Shadura and
                  Anirudha Bose and
                  CristinaCristescu and
                  Xavier Valls and
                  Raphael Isemann},
  title        = {root-project/root: v6.18/02},
  month        = aug,
  year         = 2019,
  publisher    = {Zenodo},
  version      = {v6-18-02},
  doi          = {10.5281/zenodo.3895860},
}

@misc{pycsg,
  author = {Tim Knip},
  title = {pycsg},
  year=2016,
  url ={"https://github.com/timknip/pycsg"},
  lastchecked = {16~September~2020}
}

@misc{pybind11,
   author = {Wenzel Jakob and Jason Rhinelander and Dean Moldovan},
   year = {2017},
   note = {https://github.com/pybind/pybind11},
   title = {{pybind11} -- Seamless operability between {C++11} and {Python}}
}

@incollection{cgal:hs-chep2-20b,
  author = {Susan Hert and Stefan Schirra},
  title = {{2D} Convex Hulls and Extreme Points},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.0.3}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.0.3/Manual/packages.html#PkgConvexHull2},
  year = 2020
}

@incollection{cgal:bsmf-sm-20b,
  author = {Mario Botsch and Daniel Sieger and Philipp Moeller and Andreas Fabri},
  title = {Surface Mesh},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.0.3}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.0.3/Manual/packages.html#PkgSurfaceMesh},
  year = 2020
}

@incollection{cgal:lty-pmp-20b,
  author = {S{\'e}bastien Loriot and Mael Rouxel-Labb{\'e} and Jane Tournois and Ilker O. Yaz},
  title = {Polygon Mesh Processing},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.0.3}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.0.3/Manual/packages.html#PkgPolygonMeshProcessing},
  year = 2020
}

@incollection{cgal:hk-bonp3-20b,
  author = {Peter Hachenberger and Lutz Kettner},
  title = {{3D} {Boolean} Operations on {Nef} Polyhedra},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.1}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.1/Manual/packages.html#PkgNef3},
  year = 2020
}

@incollection{cgal:h-emspe-20b,
  author = {Peter Hachenberger},
  title = {Convex Decomposition of Polyhedra},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.1}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.1/Manual/packages.html#PkgConvexDecomposition3},
  year = 2020
}


@article{10.7717/peerj-cs.103,
 title = {{SymPy}: symbolic computing in {Python}},
 author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \v{C}ert\'{i}k, Ond\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AMiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\v{c}ka, \v{S}t\v{e}p\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},
 year = 2017,
 month = jan,
 keywords = {Python, Computer algebra system, Symbolics},
 abstract = {
            SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.
         },
 volume = 3,
 pages = {e103},
 journal = {PeerJ Computer Science},
 issn = {2376-5992},
 doi = {10.7717/peerj-cs.103}
}

@ARTICLE{6769983,
  author={E. J. {McCluskey}},
  journal={The Bell System Technical Journal},
  title={Minimization of {Boolean} functions},
  year={1956},
  volume={35},
  number={6},
  pages={1417-1444},
  }

@article{WangNuclSciTech31-82-2020,
  author={{X}. {W}ang and {J}. {L}i and {Z}. {W}u {\it et al.}},
  title={{CMGC}: a {CAD} to {M}onte {C}arlo geometry conversion code},
  journal={Nucl Sci Tech},
  volume={31},
  issue={8},
  pages={82},
  year={2020},
  doi = "10.1007/s41365-020-00793-8 "
  }

 @article{DavisNIMA915-65,
title = "{F}lu{DAG}: {A} {CAD} based tool for high energy physics",
journal = "Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers, Detectors and Associated Equipment",
volume = "915",
pages = "65 - 74",
year = "2019",
issn = "0168-9002",
doi = "10.1016/j.nima.2018.10.117",
author = "Andrew Davis and Janet Barzilla and Alfredo Ferrari and Kerry T. Lee and Vasillis Vlachoudis and Paul P.H. Wilson",
keywords = "CAD, Monte Carlo, FLUKA, DAGMC, Radiation physics",
abstract = "As part of the expansion of the Direct Accelerated Geometry Monte Carlo (DAGMC) toolkit to support other Monte Carlo codes, FluDAG (FLUKA integrated with DAGMC) was developed. There has been increasing demand from the high energy physics community regarding Computer Aided Design (CAD) geometry support in Monte Carlo codes. In this paper, the development and validation of FluDAG is discussed and its application to a number of high energy physics experiments is demonstrated, along with its validity relative to native FLUKA calculations."
}

@article{LuFusionEngineeringAndDesign124-2017,
title = "Improved solid decomposition algorithms for the {CAD-to-MC} conversion tool {McCad}",
journal = "Fusion Engineering and Design",
author = "Lu, Lei and Qiu, Yuefeng and Fischer, Ulrich",
volume = "124",
year = "2017",
pages = "1269 - 1272",
doi =  "10.1016/j.fusengdes.2017.02.040"
}

@misc{Geant4MaterialDB,
title = "The {G}eant4 {M}aterial {D}atabase",
author = "{The Geant4 Collaboration}",
url = "http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/ForApplicationDeveloper/html/Appendix/materialNames.html#nist-compounds",
  year=2020,

}

@ARTICLE{pruning,
  author={J. {Goldfeather} and S. {Monar} and G. {Turk} and H. {Fuchs}},
  journal={IEEE Computer Graphics and Applications},
  title={Near real-time {CSG} rendering using tree normalization and geometric pruning},
  year={1989},
  volume={9},
  number={3},
  pages={20-28},
  doi="10.21236/ada201085",
}

@article{tetgen,
author = {Si, Hang},
title = {{TetGen}, a Delaunay-Based Quality Tetrahedral Mesh Generator},
year = {2015},
issue_date = {January 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {2},
issn = {0098-3500},
doi = {10.1145/2629697},
abstract = {TetGen is a C++ program for generating good quality tetrahedral meshes aimed to support numerical methods and scientific computing. The problem of quality tetrahedral mesh generation is challenged by many theoretical and practical issues. TetGen uses Delaunay-based algorithms which have theoretical guarantee of correctness. It can robustly handle arbitrary complex 3D geometries and is fast in practice. The source code of TetGen is freely available.This article presents the essential algorithms and techniques used to develop TetGen. The intended audience are researchers or developers in mesh generation or other related areas. It describes the key software components of TetGen, including an efficient tetrahedral mesh data structure, a set of enhanced local mesh operations (combination of flips and edge removal), and filtered exact geometric predicates. The essential algorithms include incremental Delaunay algorithms for inserting vertices, constrained Delaunay algorithms for inserting constraints (edges and triangles), a new edge recovery algorithm for recovering constraints, and a new constrained Delaunay refinement algorithm for adaptive quality tetrahedral mesh generation. Experimental examples as well as comparisons with other softwares are presented.},
journal = {ACM Trans. Math. Softw.},
month = feb,
articleno = {11},
numpages = {36},
keywords = {Delaunay, mesh improvement, mesh refinement, mesh quality, boundary recovery, Steiner points, Tetrahedral mesh generation, constrained Delaunay, edge removal, flips}
}

@misc{cadquery,
title = "{C}ad{Q}uery 2.0 {D}ocumentation",
url = "https://cadquery.readthedocs.io/en/latest/",
lastchecked = {16~September~2020}
}

@article{cython,
  title={Cython: The best of both worlds},
  author={Behnel, Stefan and Bradshaw, Robert and Citro, Craig and Dalcin, Lisandro and Seljebotn, Dag Sverre and Smith, Kurt},
  journal={Computing in Science \& Engineering},
  volume={13},
  number={2},
  pages={31--39},
  year={2011},
  publisher={IEEE},
  doi = {10.1109/MCSE.2010.118}
}
