@inproceedings{Mcnp_Werner,
author = "{C}. {J}. {W}erner {\it et al.}", 
title  = "{MCNP}6.2 {R}elease {N}otes",
booktitle = "{L}os {A}lamos {N}ational {L}aboratory report {LA-UR}-18-20808",
year = "2018"
}

@inproceedings{Fluka_Ferrari,
author = "A. Ferrari and P. R. Sala and A. Fasso and J. Ranft and Organisation Européenne and Pour La and Recherche Nucléaire and Alfredo Ferrari and Paola R. Sala and Alberto Fassò and Johannes Ranft",
title = "{FLUKA}: a multi-particle transport code",
booktitle = "{CERN} 2005-10 (2005), {INFN/TC} 05/11, {SLAC-R}-773",
year = "2005"
}

@article{Fluka_Bohlen,
title = "The {FLUKA} Code: {D}evelopments and {C}hallenges for {H}igh {E}nergy and {M}edical {A}pplications",
journal = "{N}uclear {D}ata {S}heets",
volume = "120",
pages = "211 - 214",
year = "2014",
issn = "0090-3752",
doi = "https://doi.org/10.1016/j.nds.2014.07.049",
url = "http://www.sciencedirect.com/science/article/pii/S0090375214005018",
author = "T.T. Böhlen and F. Cerutti and M.P.W. Chin and A. Fassò and A. Ferrari and P.G. Ortega and A. Mairani and P.R. Sala and G. Smirnov and V. Vlachoudis",
abstract = "The FLUKA Monte Carlo code is used extensively at CERN for all beam-machine interactions, radioprotection calculations and facility design of forthcoming projects. Such needs require the code to be consistently reliable over the entire energy range (from MeV to TeV) for all projectiles (full suite of elementary particles and heavy ions). Outside CERN, among various applications worldwide, FLUKA serves as a core tool for the HIT and CNAO hadron-therapy facilities in Europe. Therefore, medical applications further impose stringent requirements in terms of reliability and predictive power, which demands constant refinement of sophisticated nuclear models and continuous code improvement. Some of the latest developments implemented in FLUKA are presented in this paper, with particular emphasis on issues and concerns pertaining to CERN and medical applications."
}

@inproceedings{Geant3_Brun,
author         = "Brun, R. and Bruyant, F. and Maire, M. and McPherson, A. C. and Zanarini, P.",
title          = "{GEANT3}",
year           = "1987",
booktitle      = "{CERN-DD-EE}-84-1",
}

@article{Geant4_Agostinelli,
title = "Geant4—a simulation toolkit",
journal = "Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers, Detectors and Associated Equipment",
volume = "506",
number = "3",
pages = "250 - 303",
year = "2003",
issn = "0168-9002",
doi = "https://doi.org/10.1016/S0168-9002(03)01368-8",
url = "http://www.sciencedirect.com/science/article/pii/S0168900203013688",
author = "{S}. {A}gostinelli {\it et al.}",
keywords = "Simulation, Particle interactions, Geometrical modelling, Software engineering, Object-oriented technology, Distributed software development",
abstract = "Geant4 is a toolkit for simulating the passage of particles through matter. It includes a complete range of functionality including tracking, geometry, physics models and hits. The physics processes offered cover a comprehensive range, including electromagnetic, hadronic and optical processes, a large set of long-lived particles, materials and elements, over a wide energy range starting, in some cases, from 250eV and extending in others to the TeV energy range. It has been designed and constructed to expose the physics models utilised, to handle complex geometries, and to enable its easy adaptation for optimal use in different sets of applications. The toolkit is the result of a worldwide collaboration of physicists and software engineers. It has been created exploiting software engineering and object-oriented technology and implemented in the C++ programming language. It has been used in applications in particle physics, nuclear physics, accelerator design, space engineering and medical physics."
}

@software{FreeCAD,
title = "Free{CAD}",
url = "https://www.freecadweb.org",
}

@software{OpenCASCADE,
title = "Open{CASCADE}",
url = "https://www.opencascade.com",
}

@book{VTK4,
  author={Will Schroeder and Ken Martin and Bill Lorensen},
  title={{The Visualization Toolkit--An Object-Oriented Approach To 3D
                  Graphics}},
  publisher={Kitware, Inc.},
  edition={Fourth},
  year={2006}
}

@article{BDSIM_Nevay,
title = "BDSIM: An accelerator tracking code with particle–matter interactions",
journal = "Computer Physics Communications",
volume = "252",
pages = "107200",
year = "2020",
issn = "0010-4655",
doi = "https://doi.org/10.1016/j.cpc.2020.107200",
url = "http://www.sciencedirect.com/science/article/pii/S0010465520300400",
author = "L.J. Nevay and S.T. Boogert and J. Snuverink and A. Abramov and L.C. Deacon and H. Garcia-Morales and H. Lefebvre and S.M. Gibson and R. Kwee-Hinzmann and W. Shields and S.D. Walker",
keywords = "Monte Carlo simulation, Particle accelerator, Geant4, Particle physics, Particle tracking",
abstract = "Beam Delivery Simulation (BDSIM) is a program that simulates the passage of particles in a particle accelerator. It uses a suite of standard high energy physics codes (Geant4, ROOT and CLHEP) to create a computational model of a particle accelerator that combines accurate accelerator tracking routines with all of the physics processes of particles in Geant4. This unique combination permits radiation and detector background simulations in accelerators where both accurate tracking of all particles is required over long range or over many revolutions of a circular machine, as well as interaction with the material of the accelerator.
Program summary
Program Title: BDSIM Program Files doi: http://dx.doi.org/10.17632/bzg5hc65h6.1 Licensing provisions: GNU General Public License 3 Programming language: C++, flex, bison External routines/libraries: Geant4, CLHEP, ROOT, gzstream, CMake Nature of problem: Simulate energy deposition and charged particle detector background in a particle accelerator originating from beam loss where particles may pass both through the vacuum pipe with magnetic and electromagnetic fields, as well as through the material of the magnets and accelerator itself. Simulate the passage of particles both through an accelerator and the surrounding material such as air. Do so in a sufficiently flexible way that a variety of accelerator configurations can be easily simulated. Solution method: Automatic creation of a 3D Geant4 model from an optical description of an accelerator using a library of generic 3D models that are user extendable. Accelerator tracking routines, the associated fields and coordinates transforms are provided for accurate magnetic field tracking."
}

@article{GUIMesh_Pinto,
title = "{GUI}Mesh: A tool to import {STEP} geometries into Geant4 via {GDML}",
journal = "Computer Physics Communications",
volume = "239",
pages = "150 - 156",
year = "2019",
issn = "0010-4655",
doi = "https://doi.org/10.1016/j.cpc.2019.01.024",
url = "http://www.sciencedirect.com/science/article/pii/S0010465519300438",
author = "M. Pinto and P. Gonçalves",
keywords = "Geant4, STEP, GDML, Radiation, Simulation, Mesh",
abstract = "Detailed radiation analysis of instruments flown in space is critical to ensure mission safety, often requiring the use of state-of-the-art particle transport simulation tools. Geant4 is one of the most powerful toolkits to simulate the interaction and the passage of particles through matter, but it is not prepared to receive Standard for The Exchange of Product data (STEP) files, the most versatile Computer-Aided Design (CAD) format, as input, requiring previous conversion to other CAD formats. This may lead to loss of detail and under or overestimation of the quantities under study, especially when the instruments have complex shapes, and/or a large number of volumes. Though several solutions have been proposed to import complex geometries from STEP files into Geant4, so far, only commercial options are available. In this paper we present a new tool, GUIMesh, that embeds FreeCAD libraries, an open-source CAD editor, to tessellate volumes, and convert them to Geometry Description Markup Language (GDML), a Geant4 readable format, in a straightforward way. Several degrees of freedom are given to the user regarding mesh precision and choice of material. Different geometries were tested for material definition, geometry and navigation errors, and the method used was successfully validated.
Program Summary
Program Title: GUIMesh Program Files doi: http://dx.doi.org/10.17632/c3c9xbspzp.1 Licensing provisions: GNU General Public License 3 (GPLv3) Programming language: Python Nature of problem: No open-source software allows to import STEP geometries intro Geant4, one of the most powerful toolkits to simulate radiation interaction with matter. Since CAD software is extensively used in the design of particle and radiation detection instruments, it is highly desirable for physicists that STEP geometries can be imported to Geant4 with little effort instead of having to code structures made of a very large number of solid volumes which are difficult to accurately reproduce with Geant4 C++ classes. Solution method: STEP geometries are converted to tessellated volumes (with some margin of error) using FreeCAD libraries. A Python script then writes GDML files based on the results allowing users to import these geometries with Geant4. A graphical user interface provides several options to the user, including material assignment and mesh precision setting for each volume."
}

@software{ESABASE2,
title = "{ESABASE2}",
url = "https://esabase2.net/product/",
}

@software{FASTRAD,
title = "{FASTRAD}",
url = "https://www.fastrad.net",
}

@software{DAGMC,
title = {DAGMC: Direct Accelerated Geometry Monte Carlo},
url = {http://svalinn.github.io/DAGMC/},
}

@software{McCad,
title = "{McCad}",
url = "https://github.com/inr-kit",
}

@software(InStep,
title = "{I}n{S}tep",
url = "https://www.solveering.com/InStep/instep.aspx",
}

@software{CADMC,
title = "(CADMC)",
url = "http://polar.psi.ch/cadmc/",
}

@book{10.5555/2501720, 
author = {Parr, Terence}, 
title = {The Definitive ANTLR 4 Reference}, 
year = {2013}, 
isbn = {1934356999},
publisher = {Pragmatic Bookshelf}, 
edition = {2nd}, 
abstract = {Programmers run into parsing problems all the time. Whether it's a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language--ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features. Build your own languages with ANTLR v4, using ANTLR's new advanced parsing technology. In this book, you'll learn how ANTLR automatically builds a data structure representing the input (parse tree) and generates code that can walk the tree (visitor). You can use that combination to implement data readers, language interpreters, and translators. You'll start by learning how to identify grammar patterns in language reference manuals and then slowly start building increasingly complex grammars. Next, you'll build applications based upon those grammars by walking the automatically generated parse trees. Then you'll tackle some nasty language problems by parsing files containing more than one language (such as XML, Java, and Javadoc). You'll also see how to take absolute control over parsing by embedding Java actions into the grammar. You'll learn directly from well-known parsing expert Terence Parr, the ANTLR creator and project lead. You'll master ANTLR grammar construction and learn how to build language tools using the built-in parse tree visitor mechanism. The book teaches using real-world examples and shows you how to use ANTLR to build such things as a data file reader, a JSON to XML translator, an R parser, and a Java class-interface extractor. This book is your ticket to becoming a parsing guru!What You Need: ANTLR 4.0 and above. Java development tools. Ant build system optional (needed for building ANTLR from source)} 
}

@software{GDML,
title= {Geometry Description Markup Language (GDML)},
url = {https://gdml.web.cern.ch/GDML/},
}

@software{fons_rademakers_2019_3895860,
  author       = {Fons Rademakers and
                  Philippe Canal and
                  Axel Naumann and
                  Olivier Couet and
                  Lorenzo Moneta and
                  Vassil Vassilev and
                  Sergey Linev and
                  Danilo Piparo and
                  Gerardo GANIS and
                  Bertrand Bellenot and
                  Enrico Guiraud and
                  Guilherme Amadio and
                  wverkerke and
                  Pere Mato and
                  TimurP and
                  Matevž Tadel and
                  wlav and
                  Enric Tejedor and
                  Jakob Blomer and
                  Andrei Gheata and
                  Stephan Hageboeck and
                  Stefan Roiser and
                  marsupial and
                  Stefan Wunsch and
                  Oksana Shadura and
                  Anirudha Bose and
                  CristinaCristescu and
                  Xavier Valls and
                  Raphael Isemann},
  title        = {root-project/root: v6.18/02},
  month        = aug,
  year         = 2019,
  publisher    = {Zenodo},
  version      = {v6-18-02},
  doi          = {10.5281/zenodo.3895860},
  url          = {https://doi.org/10.5281/zenodo.3895860}
}

@software{pycsg,
  author = {Tim Knip},
  title = {Pycsg},
  url ={"https://github.com/timknip/pycsg"},
}
 
@misc{pybind11,
   author = {Wenzel Jakob and Jason Rhinelander and Dean Moldovan},
   year = {2017},
   note = {https://github.com/pybind/pybind11},
   title = {pybind11 -- Seamless operability between C++11 and Python}
}

@incollection{cgal:hs-chep2-20b,
  author = {Susan Hert and Stefan Schirra},
  title = {{2D} Convex Hulls and Extreme Points},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.0.3}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.0.3/Manual/packages.html#PkgConvexHull2},
  year = 2020
}

@incollection{cgal:bsmf-sm-20b,
  author = {Mario Botsch and Daniel Sieger and Philipp Moeller and Andreas Fabri},
  title = {Surface Mesh},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.0.3}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.0.3/Manual/packages.html#PkgSurfaceMesh},
  year = 2020
}

@incollection{cgal:lty-pmp-20b,
  author = {S{\'e}bastien Loriot and Mael Rouxel-Labb{\'e} and Jane Tournois and Ilker O. Yaz},
  title = {Polygon Mesh Processing},
  publisher = {{CGAL Editorial Board}},
  edition = {{5.0.3}},
  booktitle = {{CGAL} User and Reference Manual},
  url = {https://doc.cgal.org/5.0.3/Manual/packages.html#PkgPolygonMeshProcessing},
  year = 2020
}

@article{10.7717/peerj-cs.103,
 title = {SymPy: symbolic computing in Python},
 author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \v{C}ert\'{i}k, Ond\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AMiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\v{c}ka, \v{S}t\v{e}p\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},
 year = 2017,
 month = jan,
 keywords = {Python, Computer algebra system, Symbolics},
 abstract = {
            SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.
         },
 volume = 3,
 pages = {e103},
 journal = {PeerJ Computer Science},
 issn = {2376-5992},
 url = {https://doi.org/10.7717/peerj-cs.103},
 doi = {10.7717/peerj-cs.103}
}

@ARTICLE{6769983,
  author={E. J. {McCluskey}},
  journal={The Bell System Technical Journal}, 
  title={Minimization of Boolean functions}, 
  year={1956},
  volume={35},
  number={6},
  pages={1417-1444},}



